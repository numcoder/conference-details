{"version":3,"sources":["components/Postlistfree.js","components/Postlistpaid.js","components/Tabs.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Postlistfree","className","PostData","map","postDetail","index","style","width","minHeight","maxHeight","Img","variant","src","imageURL","alt","Body","Title","confName","Text","city","confStartDate","entryType","href","confUrl","Component","Postlistpaid","Tabs","defaultActiveKey","id","eventKey","title","Navbar","expand","Toggle","aria-controls","Collapse","inline","type","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ygkIAwCeA,G,6KAhCP,OACG,yBAAKC,UAAU,QACf,kBAAC,IAAD,KAEX,kBAAC,IAAD,KACA,kBAAC,IAAD,KAAsBC,EAASC,KAAI,SAACC,EAAYC,GAClC,OAAO,yBAAKJ,UAAU,SAAf,IAAwB,kBAAC,IAAD,CAAqBK,MAAO,CAAEC,MAAO,QAAQC,UAAU,QAAQC,UAAU,UACxG,kBAAC,IAAoBC,IAArB,CAA0BJ,MAAO,CAAEC,MAAO,UAAUC,UAAU,QAAQC,UAAU,SAAWE,QAAQ,MAAMC,IAAKR,EAAWS,SAAWC,IAAI,+BACpI,kBAAC,IAAoBC,KAArB,KACI,kBAAC,IAAoBC,MAArB,KAA4BZ,EAAWa,UACvC,kBAAC,IAAoBC,KAArB,KACA,4BAAKd,EAAWe,MACf,gCAAMf,EAAWgB,eACR,4BAAKhB,EAAWiB,WACxB,uBAAGC,KAAMlB,EAAWmB,SAAUnB,EAAWmB,wB,GAhBtCC,c,QCiCZC,E,uKAhCP,OACG,yBAAKxB,UAAU,QAChB,kBAAC,IAAD,KAEV,kBAAC,IAAD,KACA,kBAAC,IAAD,KAAsBC,EAASC,KAAI,SAACC,EAAYC,GAClC,OAAO,yBAAKJ,UAAU,SAAf,IAAwB,kBAAC,IAAD,CAAqBK,MAAO,CAAEC,MAAO,QAAQC,UAAU,QAAQC,UAAU,UACxG,kBAAC,IAAoBC,IAArB,CAAyBJ,MAAO,CAAEC,MAAO,UAAUC,UAAU,QAAQC,UAAU,SAAYE,QAAQ,MAAMC,IAAKR,EAAWS,SAAWC,IAAI,gCACpI,kBAAC,IAAoBC,KAArB,KACI,kBAAC,IAAoBC,MAArB,KAA4BZ,EAAWa,UACvC,kBAAC,IAAoBC,KAArB,KACA,4BAAKd,EAAWe,MACf,gCAAMf,EAAWgB,eACR,4BAAKhB,EAAWiB,WACxB,uBAAGC,KAAMlB,EAAWmB,SAAUnB,EAAWmB,wB,GAhBtCC,aCsBZE,E,uKAnBP,OACG,yBAAKzB,UAAU,QACb,kBAAC,IAAD,CAAqB0B,iBAAiB,OAAOC,GAAG,4BAChD,kBAAC,IAAD,CAAoBC,SAAS,OAAOC,MAAM,QACrD,kBAAC,EAAD,OAEA,kBAAC,IAAD,CAAoBD,SAAS,OAAOC,MAAM,QACxC,kBAAC,EAAD,a,GATeN,a,gCCwBJO,E,uKAtBP,OAEI,yBAAK9B,UAAU,UACtB,kBAAC,IAAD,CAAwB+B,OAAO,MAC/B,gDACA,kBAAC,IAAsBC,OAAvB,CAA8BC,gBAAc,qBAC5C,kBAAC,IAAsBC,SAAvB,CAAgCP,GAAG,oBACjC,yBAAK3B,UAAU,QACjB,kBAAC,IAAD,CAAqBmC,QAAM,GAC3B,kBAAC,IAAD,CAA4BC,KAAK,OAAOC,YAAY,SAASrC,UAAU,YACvE,kBAAC,IAAD,CAAuBU,QAAQ,kBAA/B,mB,GAbgBa,aCeNe,E,uKAZP,OACG,yBAAKtC,UAAU,OAEd,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANMuB,aCMEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff0a5f90.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PostData from './postfree.json';\r\nimport * as ReactBootstrap from \"react-bootstrap\";\r\nimport './Tiles.css';\r\n\r\n\r\nclass Postlistfree extends Component {\r\n    render() {\r\n        return (\r\n           <div className=\"Free\">\r\n           <ReactBootstrap.Container>\r\n\r\n<ReactBootstrap.Row>\r\n<ReactBootstrap.Col >{PostData.map((postDetail, index) => {\r\n              return <div className=\"Slide\"> <ReactBootstrap.Card style={{ width: '18rem',minHeight:'35rem',maxHeight:'35rem' }}>\r\n              <ReactBootstrap.Card.Img  style={{ width: '17.9rem',minHeight:'18rem',maxHeight:'18rem' }} variant=\"top\" src={postDetail.imageURL}  alt=\"Conference 2020{No Poster}\" />\r\n                  <ReactBootstrap.Card.Body>\r\n                      <ReactBootstrap.Card.Title>{postDetail.confName}</ReactBootstrap.Card.Title>\r\n                      <ReactBootstrap.Card.Text>\r\n                      <h6>{postDetail.city}</h6>\r\n                       <h6> {postDetail.confStartDate}</h6>\r\n                                <h5>{postDetail.entryType}</h5>\r\n                        <a href={postDetail.confUrl}>{postDetail.confUrl}</a>\r\n                      </ReactBootstrap.Card.Text>\r\n                      \r\n                  </ReactBootstrap.Card.Body>\r\n                  </ReactBootstrap.Card></div>\r\n             })}\r\n\r\n</ReactBootstrap.Col>\r\n\r\n</ReactBootstrap.Row>\r\n</ReactBootstrap.Container>\r\n           </div>\r\n        )\r\n    }\r\n\r\n   \r\n}\r\n\r\nexport default Postlistfree","import React, {Component} from 'react';\r\nimport PostData from './postpaid.json';\r\nimport * as ReactBootstrap from \"react-bootstrap\";\r\nimport './Tiles.css';\r\n\r\nclass Postlistpaid extends Component {\r\n    render() {\r\n        return (\r\n           <div className=\"Paid\">\r\n          <ReactBootstrap.Container>\r\n\r\n<ReactBootstrap.Row>\r\n<ReactBootstrap.Col >{PostData.map((postDetail, index) => {\r\n              return <div className=\"Slide\"> <ReactBootstrap.Card style={{ width: '18rem',minHeight:'35rem',maxHeight:'35rem' }}>\r\n              <ReactBootstrap.Card.Img style={{ width: '17.9rem',minHeight:'18rem',maxHeight:'18rem' }}  variant=\"top\" src={postDetail.imageURL}  alt=\"Conference 2020{No Poster} \" />\r\n                  <ReactBootstrap.Card.Body>\r\n                      <ReactBootstrap.Card.Title>{postDetail.confName}</ReactBootstrap.Card.Title>\r\n                      <ReactBootstrap.Card.Text>\r\n                      <h6>{postDetail.city}</h6>\r\n                       <h6> {postDetail.confStartDate}</h6>\r\n                                <h5>{postDetail.entryType}</h5>\r\n                        <a href={postDetail.confUrl}>{postDetail.confUrl}</a>\r\n                      </ReactBootstrap.Card.Text>\r\n                      \r\n                  </ReactBootstrap.Card.Body>\r\n                  </ReactBootstrap.Card></div>\r\n             })}\r\n\r\n</ReactBootstrap.Col>\r\n\r\n</ReactBootstrap.Row>\r\n</ReactBootstrap.Container>\r\n           </div>\r\n        )\r\n    }\r\n\r\n   \r\n}\r\n\r\nexport default Postlistpaid","import React, {Component} from 'react';\r\nimport * as ReactBootstrap from \"react-bootstrap\";\r\nimport Postlistf from './Postlistfree'\r\nimport Postlistp from './Postlistpaid'\r\n\r\n\r\nclass Tabs extends Component {\r\n    render() {\r\n        return (\r\n           <div className=\"Tabs\">\r\n             <ReactBootstrap.Tabs defaultActiveKey=\"Free\" id=\"uncontrolled-tab-example\">\r\n             <ReactBootstrap.Tab eventKey=\"Free\" title=\"Free\">\r\n  <Postlistf />\r\n  </ReactBootstrap.Tab>\r\n  <ReactBootstrap.Tab eventKey=\"Paid\" title=\"Paid\">\r\n    <Postlistp />\r\n  </ReactBootstrap.Tab>\r\n\r\n  \r\n</ReactBootstrap.Tabs>\r\n           </div>\r\n        )\r\n    }\r\n\r\n   \r\n}\r\n\r\nexport default Tabs;","import React, {Component} from 'react';\r\nimport * as ReactBootstrap from \"react-bootstrap\";\r\nimport './Tiles.css';\r\n\r\n\r\nclass Navbar extends Component {\r\n    \r\n    render() {\r\n        return (\r\n           \r\n            <div className=\"Navbar\">\r\n     <ReactBootstrap.Navbar  expand=\"lg\">\r\n     <h5>Conferences-List</h5>\r\n     <ReactBootstrap.Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n     <ReactBootstrap.Navbar.Collapse id=\"basic-navbar-nav\">\r\n       <div className=\"Text\">  \r\n     <ReactBootstrap.Form inline>\r\n     <ReactBootstrap.FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n     <ReactBootstrap.Button variant=\"outline-danger\">Search</ReactBootstrap.Button>\r\n     </ReactBootstrap.Form></div>\r\n     </ReactBootstrap.Navbar.Collapse>\r\n     </ReactBootstrap.Navbar>\r\n     </div>\r\n           \r\n        )\r\n    }\r\n\r\n   \r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\nimport './App.css'\nimport * as ReactBootstrap from \"react-bootstrap\";\nimport Tabs from './components/Tabs'\nimport Navbar from './components/Navbar'\n\nclass App extends Component {\n    render() {\n        return (\n           <div className=\"App\" >\n\n            <Navbar /> \n            <Tabs />\n           </div>\n        )\n    }\n\n   \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}